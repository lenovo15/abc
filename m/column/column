/*****************************************************************************/
/*  column.cpp - plugin example for LibreCAD                                 */
/*                                                                           */
/*  Copyright (C) 2011 Rallaz, rallazz@gmail.com                             */
/*                                                                           */
/*  This library is free software, licensed under the terms of the GNU       */
/*  General Public License as published by the Free Software Foundation,     */
/*  either version 2 of the License, or (at your option) any later version.  */
/*  You should have received a copy of the GNU General Public License        */
/*  along with this program.  If not, see <http://www.gnu.org/licenses/>.    */
/*****************************************************************************/

#include <QGridLayout>
#include <QLabel>
#include <QPushButton>
#include <QLineEdit>
#include <QSettings>
#include <QMessageBox>
#include <QDoubleValidator>
#include <QGroupBox>
#include "document_interface.h"
#include "column.h"

QString LC_column::name() const
 {
     return (tr("column plugin"));
 }

PluginCapabilities LC_column::getCapabilities() const
{
    PluginCapabilities pluginCapabilities;
    pluginCapabilities.menuEntryPoints
            << PluginMenuLocation("Help", tr("column plugin"));
    return pluginCapabilities;
}

void LC_column::execComm(Document_Interface *doc,
                             QWidget *parent, QString cmd)
{
    Q_UNUSED(doc);
    Q_UNUSED(cmd);
    lc_columndlg pdt(parent);
    int result =  pdt.exec();
    if (result == QDialog::Accepted)
        pdt.procesAction(doc);
}




/*****************************/
lc_columndlg::lc_columndlg(QWidget *parent) :  QDialog(parent)
{
    setWindowTitle(tr("Draw column"));
    QLabel *label;

    QDoubleValidator *val = new QDoubleValidator(0);
    QGridLayout *mainLayout = new QGridLayout;

    label = new QLabel(tr("Start X:"));
    mainLayout->addWidget(label, 1, 1);
    startxedit = new QLineEdit();
    startxedit->setValidator(val);
    mainLayout->addWidget(startxedit, 2, 1);

    label = new QLabel(tr("Start Y:"));
    mainLayout->addWidget(label, 3, 1);
    startyedit = new QLineEdit();
    startyedit->setValidator(val);
    mainLayout->addWidget(startyedit, 4, 1);

    label = new QLabel(tr("Enter radius:"));
    mainLayout->addWidget(label, 1, 4);
    radiusedit = new QLineEdit();
    radiusedit->setValidator(val);
    mainLayout->addWidget(radiusedit, 2, 4);
    
    


    QHBoxLayout *loaccept = new QHBoxLayout;
    QPushButton *acceptbut = new QPushButton(tr("Accept"));
    loaccept->addStretch();
    loaccept->addWidget(acceptbut);
    mainLayout->addLayout(loaccept, 1, 5);

    QPushButton *cancelbut = new QPushButton(tr("Cancel"));
    QHBoxLayout *locancel = new QHBoxLayout;
    locancel->addWidget(cancelbut);
    locancel->addStretch();
    mainLayout->addLayout(locancel, 3, 5);

    setLayout(mainLayout);
    readSettings();

    connect(cancelbut, SIGNAL(clicked()), this, SLOT(reject()));
    connect(acceptbut, SIGNAL(clicked()), this, SLOT(checkAccept()));
}


bool lc_columndlg::failGUI(QString *msg)
{
    if (startxedit->text().isEmpty()) {msg->insert(0, tr("Start X is empty")); return true;}
    if (startyedit->text().isEmpty()) {msg->insert(0, tr("Start Y is empty")); return true;}
  
    if (radiusedit->text().isEmpty()) {msg->insert(0, tr(" radius field is empty")); return true;}

  
  
  
   return false;
  
}







  



void lc_columndlg::procesAction(Document_Interface *doc)
{
    Q_UNUSED(doc);
    QPointF start,circum;
    qreal radius_a= 150,radius_b =radius_a -40 ;

   qreal radius_c =12;

    
    start.setX(startxedit->text().toDouble());
    start.setY(startyedit->text().toDouble());
    //radius_a=radiusedit->text().toDouble();
    //radius_b=radiusedit->text().toDouble();
     
    doc->addCircle(&start,radius_a);
    doc->addCircle(&start,radius_b);

    for(int i=0; i<360; i=i+60)
    {

        circum.setY(radius_b*cos(i*.0174));
         circum.setX(radius_b*sin(i*.0174));
         doc->addCircle(&circum,radius_c);

    }

}

void lc_columndlg::checkAccept()
{

    errmsg.clear();
    if (failGUI(&errmsg)) {
        QMessageBox::critical ( this, "column plugin", errmsg );
        errmsg.clear();
        return;
    }
    accept();
}


lc_columndlg::~lc_columndlg()
{
}
void lc_columndlg::closeEvent(QCloseEvent *event)
 {
    writeSettings();
    QWidget::closeEvent(event);
 }


void lc_columndlg::readSettings()
 {
    QString str;
    QSettings settings(QSettings::IniFormat, QSettings::UserScope, "LibreCAD", "column_plugin");
    QPoint pos = settings.value("pos", QPoint(200, 200)).toPoint();
    QSize size = settings.value("size", QSize(430,140)).toSize();

    startxedit->setText( settings.value("startx", 0.5).toString() );
    startyedit->setText( settings.value("starty", 0.5).toString() );
    radiusedit->setText( settings.value("radius", 0.5).toString() );


    resize(size);
    move(pos);
 }

void lc_columndlg::writeSettings()
 {
    QSettings settings(QSettings::IniFormat, QSettings::UserScope, "LibreCAD", "column_plugin");
    settings.setValue("pos", pos());
    settings.setValue("size", size());

    settings.setValue("startx", startxedit->text());
    settings.setValue("starty", startyedit->text());
     settings.setValue("radius", radiusedit->text());
     }

#if QT_VERSION < 0x050000
Q_EXPORT_PLUGIN2(lc_column, LC_column);
#endif

